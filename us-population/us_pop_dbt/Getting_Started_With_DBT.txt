# Install dbt-core and the necessary libraries for the backend you are using
pip install dbt-core<br>
pip install dbt-[your_backend]<br>
For example: pip install dbt-snowflake or pip install dbt-postgres

 
# Create profiles.yml file
Create .dbt folder at ~/.dbt, then create profiles.yml file inside this folder

Populate profiles.yml file based on the backend technology you are using<br>
If using Snowflake:<br>
https://docs.getdbt.com/docs/core/connect-data-platform/snowflake-setup

or visit: https://docs.getdbt.com/docs/core/connect-data-platform/about-core-connections<br>
for other backends


# Check dbt is installed correctly
Check dbt is installed correctly by issuing the following command: `dbt --version`

 
# Create new dbt project
Navigate to folder location you want to create your new dbt project, then issue the following command:<br>
dbt init <your_project_name><br>
You'll be prompted to enter the number that corresponds to the database that you will be working with.  Enter the number.

 
After executing the dbt init command, it should have created a new folder with the name that you provided and bunch of
other folders and files inside this new folder.

 

# Updating your `profiles.yml` file
The `dbt init` command that you executed should have created a `profiles.yml` file located at your default `home` directory.<br>
In Linux OS, it would be located at `~/.dbt/profiles.yml`.  In Windows OS, it would be located at `C:\Users\your_username\.dbt\profiles.yml`.<br>
You need to update this `profiles.yml` file by entering the database server details and credentials.  You may need to enclose your password with double-quotes<br>
if you get an authentication error when issuing the `dbt debug` command in the next step below.

 
# Check that dbt is set up correctly to work with your backend
Make sure you are in the same directory that contains the dbt_project.yml file.  If so, then issue the following command:<br>

`dbt debug`

This should perform checks to make sure everything is setup right, that it can connect to your backend.<br>
If all checks passed, then you are all set!

# Install dbt dependencies like dbt-utils
https://hub.getdbt.com/dbt-labs/dbt_utils/latest/<br>
Edit your packages.yml file per documentation above, then issue the command below<br>
`dbt deps`

# Common dbt commands
dbt run, dbt test, dbt compile

 
# Resources
Installing dbt-core: https://docs.getdbt.com/docs/core/pip-install<br>
Youtube video: https://www.youtube.com/watch?v=toSAAgLUHuk<br>
Populating profiles.yml for you backend: https://docs.getdbt.com/docs/core/connect-data-platform/about-core-connections